version: '3.8'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true

services:
  # ============ Database & Cache ============

  postgres:
    image: postgres:15-alpine
    container_name: thepred_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-thepred}
      POSTGRES_USER: ${POSTGRES_USER:-thepred}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-thepred}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: thepred_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============ Backend API (Internal only) ============

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: thepred_backend
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-thepred}
      - POSTGRES_USER=${POSTGRES_USER:-thepred}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRE_HOURS=${JWT_EXPIRE_HOURS:-24}
      - DEBUG=false
      - INITIAL_PRED_BALANCE=${INITIAL_PRED_BALANCE:-10000}
      - REFERRAL_BONUS_PRED=${REFERRAL_BONUS_PRED:-1000}
    networks:
      - backend
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  # ============ Telegram Bot ============

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: thepred_bot
    restart: unless-stopped
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - WEBAPP_URL=https://thepred.tech
      - API_URL=http://backend:8000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-thepred}
      - POSTGRES_USER=${POSTGRES_USER:-thepred}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - backend
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started

  # ============ WebApp (thepred.tech) ============

  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    container_name: thepred_webapp
    restart: unless-stopped
    environment:
      - API_URL=http://backend:8000
      - DEV_MODE=false
      - WEBAPP_SECRET_KEY=${WEBAPP_SECRET_KEY}
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_USERNAME=${BOT_USERNAME:-The_Pred_Bot}
    networks:
      - frontend
    depends_on:
      - backend

  # ============ Admin Panel (port 8002) ============

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: thepred_admin
    restart: unless-stopped
    environment:
      - API_URL=http://backend:8000
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_SECRET_KEY=${ADMIN_SECRET_KEY}
    ports:
      - "8002:8002"  # Exposed on server port
    networks:
      - frontend
    depends_on:
      - backend

  # ============ Landing Page (thepred.com) ============

  landing:
    build:
      context: ./landing
      dockerfile: Dockerfile
    container_name: thepred_landing
    restart: unless-stopped
    networks:
      - frontend

  # ============ Nginx Reverse Proxy ============

  nginx:
    image: nginx:latest
    container_name: thepred_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_data:/var/www/certbot:ro
      - certbot_conf:/etc/letsencrypt:ro
    networks:
      - frontend
    depends_on:
      - landing
      - webapp

  # ============ Certbot for SSL ============

  certbot:
    image: certbot/certbot
    container_name: thepred_certbot
    volumes:
      - certbot_data:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  redis_data:
  certbot_data:
  certbot_conf:
